{"version":3,"sources":["Components/SingleGame/SingleGame.js","Components/GameCollection/GameCollection.js","App.js","serviceWorker.js","index.js"],"names":["SingleGame","props","react_default","a","createElement","className","key","index","src","alt","title","time","playersMin","playersMax","numOfPlays","onClick","GameCollection","itemsFit","map","item","Components_SingleGame_SingleGame","getElementsByTagName","innerHTML","getAttribute","parseInt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","itemsFitMutable","nick","players","totalTime","checkForSelection","bind","assertThisInitialized","setState","buttonSection","document","querySelector","loader","style","display","event","target","value","xmlDoc","items","itemsArray","Array","from","Arrrr","x","length","timeInput","playersInput","playTime","playersMinAmount","playersMaxAmount","push","req","XMLHttpRequest","open","onreadystatechange","send","status","text","responseText","DOMParser","parseFromString","swal","init","createGameList","e","parentEl","parentNode","actualTime","classList","remove","add","itemsNotPlayed","itemsPlayed","itemsLength","result","Math","floor","random","placeholder","onChange","handleChange","handleClick","checkForNumOfPlays","randomGame","Components_GameCollection_GameCollection","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c994a332.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SingleGame.css';\r\n\r\nconst SingleGame = (props) => (\r\n    <li className='singleGame' key={props.index}>\r\n        <img className='photo'\r\n            src={props.src}\r\n            alt='game'\r\n        />\r\n        <div className='textInfo'> \r\n            <p className='textInfo_title'> {props.title} </p>\r\n            <p className='textInfo_time'> {props.time} min </p> \r\n            <p className='textInfo_players'> {props.playersMin} - {props.playersMax} players </p>\r\n            <p className='textInfo_numOfPlays'> {props.numOfPlays} </p> \r\n            <button className='textinfo_button-notSelected' onClick={props.onClick}></button>\r\n        </div>\r\n    </li>\r\n);\r\n\r\nexport default SingleGame;","import React from 'react';\r\nimport SingleGame from '../SingleGame/SingleGame';\r\n\r\nconst GameCollection = props => {\r\n    \r\n    let gameColl = props.itemsFit.map((item, index) => (\r\n        <SingleGame\r\n            key = {index}\r\n            index = {index}\r\n            src = {item.getElementsByTagName('image')[0].innerHTML}\r\n            title = {item.getElementsByTagName('name')[0].innerHTML} \r\n            time = {item.getElementsByTagName('stats')[0].getAttribute('playingtime')} \r\n            playersMin = {item.getElementsByTagName('stats')[0].getAttribute('minplayers')}\r\n            playersMax = {item.getElementsByTagName('stats')[0].getAttribute('maxplayers')} \r\n            numOfPlays = {parseInt(item.getElementsByTagName('numplays')[0].innerHTML) === 0 ? 'ouch, you didn\\'t play this one' : 'Number of plays: ' + item.getElementsByTagName('numplays')[0].innerHTML } \r\n            onClick = {props.onClick}\r\n        />\r\n    ))\r\n\r\n    return gameColl;\r\n}\r\n\r\nexport default GameCollection;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport GameCollection from './Components/GameCollection/GameCollection';\r\nimport swal from 'sweetalert';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      itemsFit: [],\r\n      itemsFitMutable: [],\r\n      nick: '',\r\n      players: '',\r\n      time: '',\r\n      totalTime: 0,\r\n    }\r\n    this.checkForSelection = this.checkForSelection.bind(this);\r\n  }\r\n\r\n  init(){\r\n    this.setState({\r\n      nick: '',\r\n      players: '',\r\n      time: '',\r\n      totalTime: 0,\r\n      itemsFitMutable: [],\r\n      itemsFit: [],\r\n    })\r\n    const buttonSection = document.querySelector('.buttonSection');\r\n    const totalTime = document.querySelector('.totalTime');\r\n    const loader = document.querySelector('.loader');\r\n    buttonSection.style.display = 'none';\r\n    loader.style.display = 'none';\r\n    totalTime.style.display = 'none';\r\n  }\r\n\r\n  handleChange(event) {    \r\n    switch (event.target.className) {\r\n      case \"inputs_nick\":\r\n        this.setState({nick: event.target.value});\r\n        break;\r\n      case \"inputs_time\":\r\n        this.setState({time: event.target.value});\r\n        break;\r\n      case \"inputs_players\":\r\n        this.setState({players: event.target.value});\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  createGameList(xmlDoc) {\r\n    const items = xmlDoc.getElementsByTagName(\"item\");  \r\n    const itemsArray = Array.from(items);\r\n    const Arrrr = [];\r\n\r\n    for (let x = 0 ; x <= itemsArray.length - 1 ; x++) {\r\n      const timeInput = parseInt(this.state.time);\r\n      const playersInput = parseInt(this.state.players);\r\n      const playTime = itemsArray[x].getElementsByTagName('stats')[0].getAttribute('playingtime');\r\n      const playersMinAmount = itemsArray[x].getElementsByTagName('stats')[0].getAttribute('minplayers');\r\n      const playersMaxAmount = itemsArray[x].getElementsByTagName('stats')[0].getAttribute('maxplayers');\r\n\r\n      if (timeInput >= parseInt(playTime) && playersInput >= playersMinAmount && playersInput <= playersMaxAmount) {\r\n        Arrrr.push(itemsArray[x]);\r\n      } \r\n    }    \r\n    this.setState({itemsFitMutable: Arrrr, itemsFit: Arrrr});\r\n  }\r\n  \r\n\r\n  handleClick(){ \r\n    const self = this;\r\n    const loader = document.querySelector('.loader');\r\n    const buttonSection = document.querySelector('.buttonSection');\r\n    const totalTime = document.querySelector('.totalTime');\r\n    loader.style.display= 'flex';\r\n\r\n    const req = new XMLHttpRequest();\r\n    req.open(\"GET\", 'https://cors-anywhere.herokuapp.com/https://www.boardgamegeek.com/xmlapi2/collection?username=' + this.state.nick + '&stats=1&subtype=boardgame&own=1', false);\r\n    req.onreadystatechange = () => {loader.style.display = 'none'};\r\n    req.send();\r\n\r\n    if (req.status === 200 ){  \r\n      buttonSection.style.display = 'flex';\r\n      totalTime.style.display = 'block';\r\n\r\n      const text = req.responseText;\r\n      const parser = new DOMParser();\r\n      const xmlDoc = parser.parseFromString(text, \"text/xml\");\r\n\r\n      if (xmlDoc.getElementsByTagName(\"message\")[0]) {\r\n        swal('oops..', 'Invalid username', 'error');\r\n        self.init();\r\n      } else if (xmlDoc.getElementsByTagName(\"item\")) {\r\n        loader.style.display = 'none';\r\n        this.createGameList(xmlDoc);\r\n      }\r\n\r\n    } else if (req.status !== 200) {\r\n      swal('Ooops..', 'Something went wrong, please try again', 'error');\r\n      buttonSection.style.display = 'none';\r\n      totalTime.style.display = 'none';\r\n    }\r\n  }\r\n    \r\n  checkForSelection(e) {\r\n    const parentEl = e.target.parentNode.parentNode;\r\n    const time = parseInt(parentEl.querySelector('.textInfo_time').innerHTML);\r\n\r\n    if (e.target.className === 'textinfo_button-selected') {\r\n      const actualTime = parseInt(this.state.totalTime) - time;\r\n      this.setState({totalTime: actualTime});\r\n\r\n      e.target.classList.remove('textinfo_button-selected');\r\n      e.target.classList.add('textinfo_button-notSelected');\r\n    } else {\r\n      const actualTime = parseInt(this.state.totalTime) + time;\r\n      this.setState({totalTime: actualTime});\r\n\r\n      e.target.classList.remove('textinfo_button-notSelected');\r\n      e.target.classList.add('textinfo_button-selected');\r\n    }\r\n  }\r\n\r\n  checkForNumOfPlays(e){\r\n    const items = this.state.itemsFit;\r\n    let itemsNotPlayed = [];\r\n    let itemsPlayed = [];\r\n    \r\n    for (let x = 0; x <= items.length - 1 ; x++ ) {\r\n      let playedGames = parseInt(items[x].getElementsByTagName('numplays')[0].innerHTML);\r\n\r\n      if (playedGames === 0) {\r\n        itemsNotPlayed.push(items[x]);\r\n      } else {\r\n        itemsPlayed.push(items[x])\r\n      }\r\n    }\r\n\r\n    e.target.className === 'buttonSection_played' ? this.setState({itemsFitMutable: itemsPlayed}) : this.setState({itemsFitMutable: itemsNotPlayed});\r\n  }\r\n\r\n  randomGame(){\r\n    const buttonSelected = document.querySelector('.textinfo_button-notSelected');\r\n    buttonSelected.style.display = 'none';\r\n    const itemsLength = this.state.itemsFit.length;\r\n    const result = Math.floor(Math.random() * (itemsLength));\r\n    const item = [];\r\n    item.push(this.state.itemsFit[result]);\r\n\r\n    this.setState({itemsFitMutable: item});\r\n\r\n    const totalTime = document.querySelector('.totalTime');\r\n    totalTime.style.display = 'none';\r\n  }\r\n  \r\n  render () {\r\n   \r\n    return (\r\n      <div className='app'>\r\n        <div className='inputs'>\r\n          <h1> Who are you? </h1>\r\n          <input className='inputs_nick' placeholder='your nickname' value={this.state.nick} onChange={this.handleChange.bind(this)} />\r\n          <h1> How much time do we have? </h1>\r\n          <input className='inputs_time' placeholder='only numbers!' value={this.state.time} onChange={this.handleChange.bind(this)} />\r\n          <h1> How many people?</h1>\r\n          <input className='inputs_players' placeholder='type the number' value={this.state.players} onChange={this.handleChange.bind(this)} />\r\n          <div className='inputs_button'>\r\n            <button className='inputs_button_search' onClick={this.handleClick.bind(this)}> go </button>\r\n            <button className='inputs_button_clear' onClick={this.init.bind(this)}> clear </button>\r\n          </div>\r\n        </div>\r\n        <div className='loader'>\r\n          <div className='loader_dot1'></div>\r\n          <div className='loader_dot2'></div>\r\n          <div className='loader_dot3'></div>\r\n        </div>\r\n        <div className='buttonSection'>\r\n          <h1>Something new<button className='buttonSection_notPlayed' onClick={this.checkForNumOfPlays.bind(this)}>></button></h1>\r\n          <h1>Something what I know<button className='buttonSection_played' onClick={this.checkForNumOfPlays.bind(this)}>></button></h1> \r\n          <h1> Something random <button className='buttonSection_random' onClick={this.randomGame.bind(this)}>></button></h1>\r\n        </div>\r\n        <h1 className='totalTime'> Total time: <span>{this.state.totalTime}</span> </h1>\r\n        <div className='results'>\r\n          <ul className='gameCollection'> \r\n            <GameCollection \r\n              itemsFit={this.state.itemsFitMutable}\r\n              onClick={this.checkForSelection}\r\n            />\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  } \r\n};\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}